// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;

#nullable disable

namespace RentApartments.Infrastructure.EntityFramework.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            // Apartment entity
            modelBuilder.Entity("RentApartments.Domain.Entities.Apartment", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<string>("Address")
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnType("character varying(200)");

                b.Property<int>("Status")
                    .HasColumnType("integer");

                b.Property<Guid>("LandlordId")
                    .HasColumnType("uuid");

                b.HasKey("Id");

                b.HasIndex("LandlordId");

                b.ToTable("Apartments");
            });

            // Tenant entity
            modelBuilder.Entity("RentApartments.Domain.Entities.Tenant", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("character varying(100)");

                b.HasKey("Id");

                b.ToTable("Tenants");
            });

            // Landlord entity
            modelBuilder.Entity("RentApartments.Domain.Entities.Landlord", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("character varying(100)");

                b.HasKey("Id");

                b.ToTable("Landlords");
            });

            // RentalAgreement entity
            modelBuilder.Entity("RentApartments.Domain.Entities.RentalAgreement", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<DateTime>("CreationDate")
                    .HasColumnType("timestamp with time zone");

                b.Property<DateTime>("StartDate")
                    .HasColumnType("timestamp with time zone");

                b.Property<DateTime?>("EndDate")
                    .HasColumnType("timestamp with time zone");

                b.Property<Guid>("ApartmentId")
                    .HasColumnType("uuid");

                b.Property<Guid>("TenantId")
                    .HasColumnType("uuid");

                b.Property<Guid>("LandlordId")
                    .HasColumnType("uuid");

                // Представим, что Money реализован как Value Object с Amount и Currency
                b.Property<decimal>("MonthlyRent_Amount")
                    .HasColumnType("numeric");

                b.Property<string>("MonthlyRent_Currency")
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasColumnType("character varying(3)");

                b.HasKey("Id");

                b.HasIndex("ApartmentId");

                b.HasIndex("TenantId");

                b.HasIndex("LandlordId");

                b.ToTable("RentalAgreements");
            });

            // RentRequest entity
            modelBuilder.Entity("RentApartments.Domain.Entities.RentRequest", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<DateTime>("RequestDate")
                    .HasColumnType("timestamp with time zone");

                b.Property<int>("Status")
                    .HasColumnType("integer");

                b.Property<string>("Message")
                    .HasColumnType("text");

                b.Property<Guid>("ApartmentId")
                    .HasColumnType("uuid");

                b.Property<Guid>("TenantId")
                    .HasColumnType("uuid");

                b.Property<Guid>("LandlordId")
                    .HasColumnType("uuid");

                b.HasKey("Id");

                b.HasIndex("ApartmentId");

                b.HasIndex("TenantId");

                b.HasIndex("LandlordId");

                b.ToTable("RentRequests");
            });

            // Навигационные связи
            modelBuilder.Entity("RentApartments.Domain.Entities.Apartment", b =>
            {
                b.HasOne("RentApartments.Domain.Entities.Landlord", "Landlord")
                    .WithMany("ActiveApartments")
                    .HasForeignKey("LandlordId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Landlord");
            });

            modelBuilder.Entity("RentApartments.Domain.Entities.RentalAgreement", b =>
            {
                b.HasOne("RentApartments.Domain.Entities.Apartment", "Apartment")
                    .WithMany()
                    .HasForeignKey("ApartmentId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("RentApartments.Domain.Entities.Tenant", "Tenant")
                    .WithMany()
                    .HasForeignKey("TenantId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("RentApartments.Domain.Entities.Landlord", "Landlord")
                    .WithMany()
                    .HasForeignKey("LandlordId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Apartment");
                b.Navigation("Tenant");
                b.Navigation("Landlord");
            });

            modelBuilder.Entity("RentApartments.Domain.Entities.RentRequest", b =>
            {
                b.HasOne("RentApartments.Domain.Entities.Apartment", "Apartment")
                    .WithMany()
                    .HasForeignKey("ApartmentId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("RentApartments.Domain.Entities.Tenant", "Tenant")
                    .WithMany()
                    .HasForeignKey("TenantId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("RentApartments.Domain.Entities.Landlord", "Landlord")
                    .WithMany()
                    .HasForeignKey("LandlordId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Apartment");
                b.Navigation("Tenant");
                b.Navigation("Landlord");
            });
#pragma warning restore 612, 618
        }
    }
}
